
type SAAnswerData {
    answerId: Int,
    questionAnswerId: Int,
    answer: String,
}

type SAQuestionData {
    questionId: Int,
    parentQuestionAnswerId: Int,
    question: String,
    hasMultipleAnswers: Boolean,
    questionWeight: Int,
    answers: [SAAnswerData]
}

type SAEvaluationProcess {
    processId: Int,
    organisationId: Int,
    organisationName: String,
    created: String,
    status: String,
    statusCode: Int,
    userId: Int,
    userEmail: String,
    categoryId: Int,
    categoryName: String,
}

type SAEvaluationResult {
    processId: Int,
    categoryId: Int,
    created: String,
    answerTotalWeight: Int,
    answerMaxWeight: Int,
    statusCode: Int,

}

type SAEvaluationReportItem {
    questionId: Int,
    answerId: Int,
    question: String,
    answer: String,
    description: String,
}

type SAEvaluationReport {
    maxCategoryWeight: Int,
    totalProcessWeight: Int,
    expectedProcessWeight: Int,
    items: [SAEvaluationReportItem]
}

type SAProcessAnsweredQuestion {
    questionAnswerId: Int,
    questionId: Int,
    answerId: Int,
}

extend type Query {
	getSecurityAssessmentCategories: [SACategory]
    getSecurityAssessmentQuestionsDataByCategory(categoryId: Int): [SAQuestionData]
    getEvaluationProcesses(organisationId: Int): [SAEvaluationProcess]
    getEvaluationsResults(organisationId: Int!, categoryId: Int ): [SAEvaluationResult]
    getEvaluationReport( processId: Int! ): SAEvaluationReport
    getProcessAnsweredQuestions( processId: Int! ): [SAProcessAnsweredQuestion]
}

extend type Mutation {
	createEvaluationProcess( organisationId: Int, categoryId: Int):Int
    putAnswerToQuestion(questionId: Int, answerId: Int, processId: Int):Boolean
    removeAnswerFromQuestion(questionId: Int, answerId: Int, processId: Int):Boolean
    finalizeEvaluation( organisationId: Int, processId: Int ):Boolean
    finalizeEvaluationForced( organisationId: Int, processId: Int ):Boolean
}
